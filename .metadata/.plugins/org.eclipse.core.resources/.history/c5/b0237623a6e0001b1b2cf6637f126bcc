package com.assgnment3;
import java.util.Arrays;
import java.util.*;
import java.util.List;

import com.assignment3.Trader;
import com.assignment3.Transaction;
import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.toList;

public class Test3 {

	public static void main(String[] args) {
		
		Trader raoul = new Trader("Raoul", "Cambridge");
		Trader mario = new Trader("Mario","Milan");
		Trader alan = new Trader("Alan","Cambridge");
		Trader brian = new Trader("Brian","Cambridge");

		List<Transaction> transactions = Arrays.asList(
			new Transaction(brian, 2011, 300),
			new Transaction(raoul, 2012, 1000),
			new Transaction(raoul, 2011, 400),
			new Transaction(mario, 2012, 710),
			new Transaction(mario, 2012, 700),
			new Transaction(alan, 2012, 950)
		      );
		
		// Find all transactions from year 2011 and sort them by value (small to high).
        List<Transaction> t= transactions.stream()
                                               .filter(transaction -> transaction.getYear() == 2011)
                                               .sorted(comparing(Transaction::getValue))
                                               .collect(toList());
        
        
        System.out.println(t);
		System.out.println("------------------------------------------------------------------------------------------------");
		
		
        // What are all the unique cities where the traders work?
        List<String> cities = 
            transactions.stream()
                        .map(transaction -> transaction.getTrader().getCity())
                        .distinct()
                        .collect(toList());
        
        
        
        System.out.println(cities);
        
    	System.out.println("------------------------------------------------------------------------------------------------");
		
// Find all traders from Cambridge and sort them by name.
        
        List<Trader> traders = 
            transactions.stream()
                        .map(Transaction::getTrader)
                        .filter(trader -> trader.getCity().equals("Cambridge"))
                        .distinct()
                        .sorted(comparing(Trader::getName))
                        .collect(toList());
        System.out.println(traders);
    	System.out.println("------------------------------------------------------------------------------------------------");
		
        
 //  Return a string of all traders’ names sorted alphabetically.
        
        String traderStr = 
            transactions.stream()
                        .map(transaction -> transaction.getTrader().getName())
                        .distinct()
                        .sorted()
                        .reduce("", (n1, n2) -> n1 + n2);
        System.out.println(traderStr);
    	System.out.println("------------------------------------------------------------------------------------------------");
		
        
 // Are any trader based in Milan
        
        boolean milanBased =
            transactions.stream()
                        .anyMatch(transaction -> transaction.getTrader()
                                                            .getCity()
                                                            .equals("Milan")
                                 );
        System.out.println(milanBased);
        
    	System.out.println("------------------------------------------------------------------------------------------------");
		
        //  Print all transactions’ values from the traders living in Cambridge.
        transactions.stream()
                    .map(Transaction::getTrader)
                    .filter(trader -> trader.getCity().equals("Milan"))
                    .forEach(trader -> trader.setCity("Cambridge"));
        System.out.println(transactions);
    	System.out.println("------------------------------------------------------------------------------------------------");
		
     // What’s the highest value of all the transactions?
        int highestValue = 
            transactions.stream()
                        .map(Transaction::getValue)
                        .reduce(0, Integer::max);
        System.out.println(highestValue); 
    	System.out.println("------------------------------------------------------------------------------------------------");
		
        //Find the transaction with the smallest value.
        int smallestValue = 
                transactions.stream()
                            .map(Transaction::getValue)
                            .reduce(0, Integer::min);
            System.out.println(smallestValue); 
	}
	
	
}
